<!--
The following is the call graph plugin.

Copyright 2019, Gavin Chou, gavineaglechou@gmail.com
http://github.com/gavinchou/dot-build-tool.git

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-->

<style>
.node {
  fill: #dc2553;
}
.node:hover {
  fill: #dc255388;
}
.fade {
  opacity: 0.2;
}
.fade:hover {
  opacity: 1.0;
}
.arrow-path {
  stroke: #dc2553;
}
.arrow-head-tail {
  fill: #dc2553;
  stroke: #dc2553;
}
</style>

<script xlink:href="https://cdn.bootcdn.net/ajax/libs/jquery/3.4.0/jquery.min.js">
</script>
<script>
<![CDATA[

// configure to switch highlight effect
const HIGHLIGHT = 1;
const FADE = 2;
var style = HIGHLIGHT;

var gDontShowInstruction = false;
var gResizeViewOnLoad = false;

function processClick() {
  var allNodes = $('.node');
  var allEdges = $('.edge');
  var allNodeTitles = allNodes.find('title');
  var allEdgeTitles = allEdges.find('title');
  var nodeAreas = allNodes.find('[fill]'); // including text

  var urlParams = new URLSearchParams(location.search);
  var s = urlParams.get("highlightStyle");
  if (s != null) {
    style = s == "fade" ? FADE : (s == "highlight" ? HIGHLIGHT : style);
  }

  var nonHiClass = style == FADE ? 'fade' : 'none';
  var hiClass = style == FADE ? 'none' : 'node';
  var arrowPathClass = style == FADE ? 'none' : 'arrow-path';
  var arrowHeadTailClass = style == FADE ? 'none'  : 'arrow-head-tail';
  var arrowTextClass = 'none'; // always remains none;

  // TODO: only nodes and edges, which can be recorded and modified, should be
  //       considered
  clearHighlight = function() {
    allNodes.each(function(index) {
      $(this).find('[fill]:not(text)').attr('class', nonHiClass);
    });
    allEdges.each(function(index) {
      $(this).find('*').attr('class', nonHiClass);
    });
  }

  nodeAreas.click(function() {
    clearHighlight();
    // highlight current node first
    $(this).parent().find('[fill]:not(text)').attr('class', hiClass);
    // console.log($(this).parent());
    var highlight = function(title) {
      // FIXME: this algorithm is not efficitent enough
      // for all adj. Node,
      allEdgeTitles.each(function(index) {
        // console.log($(this).text());
        // TODO: process '->' in a node/edge name
        var arrow = $(this).text().split('->'); // &#45;&gt;
        // process arrows with ports such as n1:port1 -> n2:port2
        arrow.forEach(function (item, idx, array) {
            var a = item.split('::');
            var b = item.split(':');
            if (b == 0) return; // b >= a
            // possible port, we can just guess for now due to there is no more
            // info. for checking port except the title
            for (var i = item.length; i > 0; --i) {
              if (item[i] == ':' && item[i-1] == ':') return; // not port
              else if (item[i] == ':' && item[i-1] != ':')
                array[idx] = item.substring(0, i); // extract node name
            }
          }
        );
        if (!(arrow[0] === title || arrow[1] === title)) { // assume len == 2
          return;
        }
        // TODO: compare nodes that arrow heads attatched to
        $(this).parent().find('path').attr('class', arrowPathClass);
        $(this).parent().find('polygon').attr('class', arrowHeadTailClass);
        $(this).parent().find('text').attr('class', 'arrowTextClass');
        // console.log(arrow);
        allNodeTitles.each(function(index) {
          // process parent node only
          if (!($(this).text() === arrow[0])) {
            return;
          }
          if ($(this).parent().find('[fill]').attr('class') === hiClass) {
            return;
          }
          $(this).parent().find('[fill]:not(text)').attr('class', hiClass);
          highlight(arrow[0]);
        });
      });
    };
    var clickedTitle = $(this).parent().find('title').text();
    highlight(clickedTitle);
  });

  // cancel highlight
  window.addEventListener("keyup", function(evt) {
    if (evt.defaultPrevented || evt.key != "Escape") {
      return;
    }
    clearHighlight();
    evt.preventDefault();
  }, {passive: false});
}


scaleX = 1
scaleY = 1
scaleStep = 0.20
lastZoom = -1
const minZoomInterval = 30.0

/**
 * @param svg the svg to resize
 * @relies
 */
function resizeView(svg) {
  if (!gResizeViewOnLoad) return;
  var windowWidth = window.innerWidth;
  var windowHeight = window.innerHeight;
  var unit = svg.attr('width').substr(-2);
  if (!isNaN(parseInt(unit))) unit = "";
  var svgWidth = parseInt(svg.attr('width').substr(0, svg.attr('width').length - unit.length));
  var svgHeight = parseInt(svg.attr('height').substr(0, svg.attr('height').length - unit.length));
  // TODO: consider unit

  var scale = Math.min(windowWidth / svgWidth, windowHeight / svgHeight);
  svgWidth = Math.floor(svgWidth * scale);
  svgHeight = Math.floor(svgHeight * scale);

  svg.attr('width',  svgWidth + unit);
  svg.attr('height', svgHeight + unit);
}

function processZoom() {
  svg = $('svg');

  resizeView(svg);

  scaleX = parseInt(svg.attr('width').substr(0, svg.attr('width').length - 2))
  scaleY = parseInt(svg.attr('height').substr(0, svg.attr('height').length - 2))

  wheelHandle = function (evt) {
    if (evt.ctrlKey == true) {
      evt.preventDefault();
      // console.log(
      //        evt.wheelDelta + ' ' + Date.now() + ' ' + scaleX + ' ' + scaleY)
      if (lastZoom > 0 && Date.now() - lastZoom < minZoomInterval) {
        return false
      }
      rate = 0;
      if (evt.wheelDelta / 120 > 0) {
        // zoom in
        rate = scaleStep
        // console.log('scroll up');
        rate = (1 + scaleStep)
      } else {
        // zoom out
        // console.log('scroll down');
        rate = 1 / (1 + scaleStep)
      }
      scaleX = parseInt(scaleX * rate + 0.5)
      scaleY = parseInt(scaleY * rate + 0.5)

      svg.attr('width', scaleX + 'pt')
      svg.attr('height', scaleY + 'pt')
      // console.log('new size ' + scaleX + ' ' + scaleY + ' ' + evt.screenX
      //              + ' ' + evt.screenY)

      // get pointer offset in view ratio offset within svg
      // the ratio of cursor's position to the svg's top-left remains the same
      // after zooming/scrolling:
      // oldCursorX / oldSvgWidth == newCursorX / newSvgWidth
      // oldCursorX = oldScrollX + evt.screenX
      // newCursorX = newScrollX + evt.screenX
      oldScrollX = window.pageXOffset
      oldScrollY = window.pageYOffset
      scrollX = 0
      scrollY = 0
      if (scaleX > window.innerWidth) {
        scrollX = parseInt(
                          (oldScrollX + evt.screenX) * rate - evt.screenX + 0.5)
      }
      if (scaleY > window.innerHeight) {
        scrollY = parseInt(
                          (oldScrollY + evt.screenY) * rate - evt.screenY + 0.5)
      }
      window.scroll({top: scrollY, left: scrollX, behavor: 'smooth'})
      // console.log('scroll to fit cursor ' + scrollX + ' ' + scrollY)

      lastZoom = Date.now()

      // consume the event
      return false
    }
    return true
  }
  window.addEventListener("mousewheel", wheelHandle, {passive: false});
}

function updateConf() {
  // Update conf from search string
  var urlParams = new URLSearchParams(location.search);

  // Only "true", "false" and "" are accepted.
  // If the flag is given with no value ("") assigned, it intends to be true
  const getBoolValue = function(name, origVal) {
    var v = !urlParams.get(name) ? "" : urlParams.get(name).toLowerCase();
    return v == "true" || urlParams.get(name) == "" ? true : (v == "false" ? false : origVal);
  };
  gDontShowInstruction = getBoolValue("dontShowInstruction", gDontShowInstruction);
  gResizeViewOnLoad = getBoolValue("resizeViewOnLoad", gResizeViewOnLoad);

  // Update conf from graph data.
  // What the user defined in graphviz doc is the highest priority.
  // Config format example:
  // __graph_js_config__ [label="gDontShowInstruction=true;gResizeViewOnLoad=true;" shape=plaintext fontcolor="#00000001" id="\N"]
  var graphConf = document.getElementById("__graph_js_config__");
  if (graphConf == null) return;
  graphConf.setAttribute("style", "display:none"); // make it invisable
  graphConf = graphConf.getElementsByTagName("text");
  if (graphConf == null || graphConf.length < 1) return;
  graphConf = graphConf[0];
  try { eval(graphConf.innerHTML); }
  catch(e) { console.log("__graph_js_config__ error."); console.log(e); };
}

async function showInstruction() {
  if (gDontShowInstruction) return;
  inst = "* click any node to highlight specific path\n"
       + "* press ESC to cancel highlight\n"
       + "* ctrl+scroll to zoom in/out";
  var svg = document.getElementsByTagName('svg')[0];
  var rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
  // Use fixed dimenssion to skip determining of transformation of the svg.
  rect.setAttribute('height', 10000); // svg.getAttribute('height')
  rect.setAttribute('width', 10000); // svg.getAttribute('width')
  rect.setAttribute('style', "fill:#555555ee");
  rect.setAttribute('id', "__highlight_instruction__");
  (async () => { svg.appendChild(rect); })();
  await sleep(100); // Tricy: sleep is needed, don't know why, but it works...
  alert(inst);
  (async () => { svg.removeChild(rect); })();
}

var sleep = (delay_ms) => { return new Promise(r => setTimeout(r, delay_ms)); };

/**
 * Focus to (scroll into view) the first element with tag
 * `<title>The title</title>`
 * The tag title is the node name in graphviz, which should be unique, if not,
 * we keep it ambiguous and focus to the first occurence.
 *
 * @param title title content
 */
async function focusElement(title) {
  // Node name is title.
  // We can also find edge by title, edge arrow "->" in html is "-&gt;"
  for (var i of document.getElementsByTagName("title")) { 
    // console.log(i.innerHTML + " == " + title);
    if (i.innerHTML != title) continue;
    var p = i.parentElement;

    // behavior Optional:
    // Defines the transition animation. One of auto or smooth. Defaults to auto.
    // block Optional:
    // Defines vertical alignment. One of start, center, end, or nearest. Defaults to start.
    // inline Optional:
    // Defines horizontal alignment. One of start, center, end, or nearest. Defaults to nearest.
    p.scrollIntoView({behavior: "smooth", block: "center", inline: "center"});

    var n = 5;
    var flash = async () => {
      var backup = p.getAttribute("style");
      while (n--) {
        p.setAttribute("style", "display:none") // disappear
        await sleep(200);
        p.setAttribute("style", backup) // appear
        await sleep(500);
      }
    };
    flash();
    // break; // we can continue without breaking for multiple elments
  }
}

function processFocus() {
  var urlParams = new URLSearchParams(location.search);
  var s = urlParams.get("focus");
  if (s == null || s.length < 1) {
    return;
  }
  focusElement(s);
}

$(document).ready(function() {
  updateConf();
  processClick();
  processZoom();
  processFocus();
  showInstruction();
});

]]>
</script>
<!--
vim: et ts=2 sw=2 ft=javascript:
-->
