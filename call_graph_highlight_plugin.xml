<!--
Copyright 2019, Gavin Chou, gavineaglechou@gmail.com

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-->

<style>
.node {
  fill: blue;
}
.node:hover {
  fill: lightblue;
}
.fade {
  opacity: 0.2;
}
.fade:hover {
  opacity: 1.0;
}
.arrow-path {
  stroke: blue;
}
.arrow-head-tail {
  fill: blue;
  stroke: blue;
}
</style>

<script xlink:href="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.0.min.js"></script>
<script>

// configure to switch hilight effect
const HILIGHT = 1;
const FADE = 2;
var style = HILIGHT;

$(document).ready(function() {
var allNodes = $('.node');
var allEdges = $('.edge');
var allNodeTitles = allNodes.find('title');
var allEdgeTitles = allEdges.find('title');
var nodeAreas = allNodes.find('[fill]'); // including text

nodeAreas.click(function() {
  var nonHiClass = style == FADE ? 'fade' : 'none';
  var hiClass = style == FADE ? 'none' : 'node';
  var arrowPathClass = style == FADE ? 'none' : 'arrow-path';
  var arrowHeadTailClass = style == FADE ? 'none'  : 'arrow-head-tail';
  var arrowTextClass = 'none'; // always remains none;

  // TODO: only nodes and edges, which can be recorded, modified should be
  //       considered
  allNodes.each(function(index) {
    $(this).find('[fill]:not(text)').attr('class', nonHiClass);
  });
  allEdges.each(function(index) {
    $(this).find('*').attr('class', nonHiClass);
  });
  // highlight current node first
  $(this).parent().find('[fill]:not(text)').attr('class', hiClass);
  // console.log($(this).parent());
  // console.log(title);
  var highlight = function(title) {
    // for all adj, Node
    allEdgeTitles.each(function(index) {
      // console.log($(this).text());
      var arrow = $(this).text().split('->'); // &#45;&gt;
      if (!(arrow[0] === title || arrow[1] === title)) {
        return;
      }
      // TODO: compare nodes that arrow heads attatched to
      $(this).parent().find('path').attr('class', arrowPathClass);
      $(this).parent().find('polygon').attr('class', arrowHeadTailClass);
      $(this).parent().find('text').attr('class', 'arrowTextClass');
      // console.log(arrow);
      allNodeTitles.each(function(index) {
        // process parent node only
        if (!($(this).text() === arrow[0])) {
          return;
        }
        if ($(this).parent().find('[fill]').attr('class') === hiClass) {
          return;
        }
        $(this).parent().find('[fill]:not(text)').attr('class', hiClass);
        highlight(arrow[0]);
      });
    });
  };
  var clickedTitle = $(this).parent().find('title').text();
  highlight(clickedTitle);
});

});
</script>
<!--
vim: et ts=2 sw=2 ft=javascript:
-->
